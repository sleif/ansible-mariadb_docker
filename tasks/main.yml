---
- name: "create {{ mysql_container_name }} backup directory"
  ansible.builtin.file:
    path: "{{ container_storage_dir_base_backup }}/{{ mysql_container_name }}/conf.d"
    state: directory
    mode: '0755'

- name: create custom configuration
  community.general.ini_file:
    path: "{{ container_storage_dir_base_backup }}/{{ mysql_container_name }}/conf.d/custom.cnf"
    section: mysqld
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    mode: '0644'
  loop:
    - {option: 'max_connections', value: '{{ mariadb_container_max_connections }}'}
    # - {option: 'innodb_read_only_compressed', value: 'off'}

# mysql -u root -p --batch --skip-column-names -e 'SELECT CONCAT("ALTER TABLE ",TABLE_SCHEMA,".",TABLE_NAME," ROW_FORMAT=DYNAMIC;")
#   from INFORMATION_SCHEMA.TABLES where CREATE_OPTIONS LIKE "row_format=compressed" AND ENGINE="InnoDB"' > /tmp/m2
# cat /tmp/m2 | mysql -u root -p

# https://github.com/nextcloud/server/issues/25436
# Check…
# mariadb --batch --skip-column-names -e 'SELECT CONCAT("ALTER TABLE ",TABLE_SCHEMA,".",TABLE_NAME," ROW_FORMAT=DYNAMIC;") from
#   INFORMATION_SCHEMA.TABLES where TABLE_NAME like "oc\_%" AND ENGINE = "InnoDB" AND ROW_FORMAT != "Dynamic";'
# …and actually change:
# mariadb --batch --skip-column-names -e 'SELECT CONCAT("ALTER TABLE ",TABLE_SCHEMA,".",TABLE_NAME," ROW_FORMAT=DYNAMIC;") from
#   INFORMATION_SCHEMA.TABLES where TABLE_NAME like "oc\_%" AND ENGINE = "InnoDB" AND ROW_FORMAT != "Dynamic";' | mariadb

- name: Start MariaDB container for {{ mysql_database }}
  community.general.docker_container:
    name: "{{ mysql_container_name }}"
    image: "mariadb:{{ mariadb_container_image_tag }}"
    state: started
    restart_policy: always
    recreate: true
    networks:
      - name: "{{ docker_network_name }}"
        aliases:
          # - mariadb-container
          - "{{ mysql_container_name }}"
    networks_cli_compatible: true
    pull: true
    stop_timeout: 90
    published_ports: '{{ mariadb_container_exposed_port }}:3306'
    volumes:
      - "{{ container_storage_dir_base }}/{{ mysql_container_name }}/var_lib_mysql:/var/lib/mysql:Z"
      - "{{ container_storage_dir_base_backup }}/{{ mysql_container_name }}/conf.d:/etc/mysql/conf.d:Z"
    env:
      MYSQL_USER: "{{ mysql_user }}"
      MYSQL_PASSWORD: "{{ mysql_password }}"
      MYSQL_DATABASE: "{{ mysql_database }}"
      MYSQL_ROOT_PASSWORD: "{{ MYSQL_ROOT_PASSWORD }}"

- name: "create {{ mysql_container_name }} backup directory"
  ansible.builtin.file:
    path: "{{ container_storage_dir_base_backup }}/{{ mysql_container_name }}_backups"
    state: directory
    mode: '0700'
  tags:
    - mariadb_backup

- name: "ensure bzip2 is installed"
  ansible.builtin.package:
    name: bzip2
    state: present
  tags:
    - mariadb_backup

- name: Add cronjob for daily dump of mariadb {{ mysql_database }}
  ansible.builtin.cron:
    name: "Daily dump of mariadb {{ mysql_database }}"
    minute: "11"
    hour: "*/4"
    job: "docker exec {{ mysql_container_name }} sh -c 'exec mariadb-dump --lock-tables --all-databases --user=root --password={{ MYSQL_ROOT_PASSWORD }}' >
      {{ container_storage_dir_base_backup }}/{{ mysql_container_name }}_backups/{{ mysql_container_name }}.sql;
      bzip2 -f {{ container_storage_dir_base_backup }}/{{ mysql_container_name }}_backups/{{ mysql_container_name }}.sql"
  tags:
    - mariadb_backup

- name: configure logrotate for the database dump
  ansible.builtin.template:
    src: logrotate.cfg.j2
    dest: "/etc/logrotate.d/{{ mysql_container_name }}.cfg"
    mode: '0644'
  tags:
    - mariadb_backup

- name: selinux enable logrotate on NFS
  ansible.posix.seboolean:
    name: logrotate_use_nfs
    state: true
    persistent: true
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux

- name: Set selinux policy for backup rotation
  community.general.sefcontext:
    target: '{{ item.target }}'
    setype: "{{ item.setype }}"
    reload: true
    state: "{{ item.state }}"
  register: filecontext
  with_items:
    - {target: '{{ container_storage_dir_base_backup }}/{{ mysql_container_name }}_backups(/.*)?', setype: 'var_log_t', state: 'present'}
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux

# - ansible.builtin.debug:
#     msg: "{{ filecontext.results[0] }}"

- name: Run restore context to reload selinux  # noqa: no-changed-when
  ansible.builtin.command: |
    restorecon -F -R -v {{ item.target }}
  with_items:
    - {index: 0, target: '{{ container_storage_dir_base_backup }}/{{ mysql_container_name }}_backups'}
  when:
    - filecontext.results[item.index] is changed
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - mariadb_selinux
